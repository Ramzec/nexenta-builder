#!/bin/bash
#
# This program will generate initial root based on required and
# base packages's Priority field.
# It is tightly integreated into Debian bootstrapping technology.
#
# It uses three main components:
#    1) apt
#    2) reprepro
#
# Therefore it is required those packages to be pre-installed.
# Apt repository is also required.
#
##############################################################################
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (C) 2005-2011 Nexenta Systems, Inc.
# All rights reserved.
#
##############################################################################

test -f /etc/nbld.cf || (echo "Error: can't find /etc/nbld.cf" && exit 1)
. /etc/nbld.cf

build_number="$NBLD_BUILD_NUMBER"       # Nightly build number
repo="$NBLD_REPO"		        # APT repository (must exist)
dist="$NBLD_DISTRO-$NBLD_BRANCH"	# IN repository's distribution name
distro=$NBLD_DISTRO
rootdir="$NBLD_MINIROOT"                # bootstrap output
hddrepo="/usr/nexenta/repo"		# APT repository for HDD mode
customdir="$NBLD_LIBDIR"	        # directory with data files
extra_dir="/var/lib/nbld"		# directory with extra data files
debug="$NBLD_DEBUG"		        # default no debug mode
mode="$NBLD_DEFAULT_MODE"	        # no default mode
grub_hdd_menu_file="${mode}_hdd_grub-menu.txt"
install_script=nexenta-install.sh
install_profile="$rootdir$hddrepo/defaults"
pkglist="$NBLD_TMP/debootstrap-pkglist.tmp"
srclist="/etc/apt/sources.list"

product_title="NexentaOS"

# do not show license by default
ks_license_text=""

profile0="minimal"
lines0="1800"
desc0="Recommended for advanced users only"
longdesc0="Minimal profile will setup a bare minimum Console-only NexentaOS system which later could be customized by using dselect/apt-get utilities."
rootsize0="512"

profile1="desktop"
lines1="4200"
desc1="Recommended for most users setups"
longdesc1="Desktop profile will setup typical desktop system with GNOME. Desktop profile is recommended option."
rootsize1="2048"

profiles="0 1"
defprofile="1"

usage() {
	cat << EOF
Usage: nbld-bootstrap [--rootdir dir] [--debug] [--repo dir] [--dist name]
EOF
	exit 1
}

fatal() {
    echo "Error: $1"; exit 1;
}

cleanup() {
    if [ -f "$srclist.nbld" ]; then
	mv -f "$srclist.nbld" "$srclist"
    fi
    echo "Ok"
}

abort() {
    echo "Error: subprocess exited with non-zero status: $?"; exit 1;
}

trap "cleanup" INT EXIT TERM QUIT
trap "abort" ERR

UUID=`id -u`
if [ $UUID != "0" ]; then
	echo "Insufficient privileges to run $0"
	abort
fi

while test "x$1" != x; do
	if test "x$1" = "x--debug"; then debug=yes;
	elif test "x$1" = "x--repo"; then repo=$2; shift;
	elif test "x$1" = "x--dist"; then dist=$2; shift;
	elif test "x$1" = "x--rootdir"; then rootdir=$2; shift;
	elif test "x$1" = "x--help" -o "x$1" = "x-h"; then usage;
	else usage; fi
	shift
done

# Recalculate some globals
install_profile="$rootdir$hddrepo/defaults"
environ="$rootdir /usr/bin/env -i PATH=/usr/gnu/bin:/usr/bin:/sbin:/usr/sbin LOGNAME=root HOME=/root TERM=xterm"

if mount | grep $rootdir 1>/dev/null 2>&1 && test -d $rootdir; then
	echo "Error: $rootdir is busy. has loopback mounted dirs."
	exit 1
fi

if test -f $customdir/$mode.profile; then
	. $customdir/$mode.profile
elif test -f $mode.profile; then
	. $mode.profile
else
	echo "Error: $mode.profile not found."
	exit 1
fi

cat << EOF
==============================================================================
Mode:       ${mode}
Repository: ${repo} (${dist})
Fakeroot:   ${rootdir}
==============================================================================
EOF

echo -n "Live-CD/DVD mode is "
if test "x$mode_type" = xlivecd; then
	echo "ON"
else
	echo "OFF"
fi

echo -n "Generic install mode is "
if test "x$mode_type" = xinstall; then
	echo "ON"
else
	echo "OFF"
fi

echo "Selected Mode is $mode"
export STAGE0_DEBS="$STAGE0_DEBS $REQ_DEBS $STAGE0_APTINST $STAGE0_CD $STAGE0_DRIVERS $STAGE0_CD_END $STAGE0_HDD_END"

# From now on selected do 'install' or 'livecd' type
mode=$mode_type

echo -n "Debug mode is "
if test "x$debug" = xyes; then
	echo "ON"
else
	echo "OFF"
fi

echo "Cleaning up $rootdir ... "
test -d $rootdir && rm -rf $rootdir
mkdir -p $rootdir

if [ -f $srclist ]; then
    cp -f $srclist "$srclist.nbld"
fi

echo "deb $NBLD_REPO base-$NBLD_BRANCH/4.0 main contrib non-free" > $srclist
echo "deb $NBLD_REPO kernel-$NBLD_BRANCH/4.0 main contrib non-free" >> $srclist
echo "deb $NBLD_REPO plugins-$NBLD_BRANCH/4.0 main contrib non-free" >> $srclist
echo "deb $NBLD_REPO nza-$NBLD_BRANCH/4.0 main contrib non-free" >> $srclist

APT_GET="apt-get -R $rootdir"

if test "x$mode" = xinstall; then

cat << EOF
------------------------------------------------------------------------------
Downloading package archives...
------------------------------------------------------------------------------
EOF

BOOTSTRAP_REQUIRED="$BOOTSTRAP_REQUIRED $STAGE0_DEBS"

echo "$APT_GET update"
$APT_GET update || abort
echo "$APT_GET install -d -y --force-yes $BOOTSTRAP_REQUIRED"
$APT_GET install -d -y --force-yes $BOOTSTRAP_REQUIRED || fatal "Can't download package archives"

fi

if test "x$mode" = "xinstall"; then

cat << EOF
------------------------------------------------------------------------------
Generating the installation repository...
------------------------------------------------------------------------------
EOF

	test -d $rootdir$hddrepo || mkdir -p $rootdir$hddrepo
	test -d $rootdir$hddrepo/conf || mkdir -p $rootdir$hddrepo/conf

cat << EOF > $rootdir$hddrepo/conf/distributions
Origin: Installation APT
Codename: installation
Architectures: solaris-i386
Components: main contrib non-free
DebIndices: Packages Release . .gz .bz2
Description: Installation repository
EOF

	for file in `ls $rootdir/var/cache/apt/archives/*.deb`; do
		reprepro \
		--ignore=wrongdistribution \
		-b $rootdir$hddrepo \
		--export=never includedeb installation $file >> \
		$NBLD_TMP/reprepro.log.$$ 2>&1 || fatal "Can't build the installation repository"
	done
	reprepro -b $rootdir$hddrepo export installation >> \
	$NBLD_TMP/reprepro.log.$$ 2>&1 || fatal "Can't export indexes for the installation repository"

	rm -f $rootdir/var/cache/apt/archive/*.deb

	echo "deb file://$hddrepo installation main contrib non-free" > \
		$rootdir/etc/apt/sources.list

	rm -f $install_profile
	test "x$ks_scripts" != x && cat $customdir/$ks_scripts >> $install_profile
	echo "_KS_product_title='$product_title'" >> $install_profile
	for p in $profiles; do
		eval "echo \"_KS_profile_name[$p]='\$profile$p'\"" >> $install_profile
		eval "echo \"_KS_profile_lines[$p]='\$lines$p'\"" >> $install_profile
		eval "echo \"_KS_profile_desc[$p]='\$desc$p'\"" >> $install_profile
		eval "echo \"_KS_profile_longdesc[$p]='\$longdesc$p'\"" >> $install_profile
		eval "echo \"_KS_profile_rootsize[$p]='\$rootsize$p'\"" >> $install_profile
	done
	echo "_KS_profiles='$profiles'" >> $install_profile
	for i in $ks_ifaces; do
		eval "echo \"_KS_iface_ip[$i]='\$ks_iface_ip$i'\"" >> $install_profile
		eval "echo \"_KS_iface_mask[$i]='\$ks_iface_mask$i'\"" >> $install_profile
	done
	echo "_KS_ifaces='$ks_ifaces'" >> $install_profile
	test "x$apt_sources" != x && echo "_KS_apt_sources='$apt_sources'" >> $install_profile
	test "x$build_number" != x && echo "_KS_build_number='build $build_number'" >> $install_profile
	test "x$plugin_sources" != x && echo "_KS_plugin_sources='$plugin_sources'" >> $install_profile
	echo "_KS_profile_selected='$defprofile'" >> $install_profile
	test "x$ks_root_passwd" != x && echo "_KS_root_passwd='$ks_root_passwd'" >> $install_profile
	test "x$ks_user_name" != x && echo "_KS_user_name='$ks_user_name'" >> $install_profile
	test "x$ks_user_passwd" != x && echo "_KS_user_passwd='$ks_user_passwd'" >> $install_profile
	test "x$ks_hostname" != x && echo "_KS_hostname='$ks_hostname'" >> $install_profile
	test "x$ks_domainname" != x && echo "_KS_domainname='$ks_domainname'" >> $install_profile
	test "x$ks_gateway" != x && echo "_KS_gateway='$ks_gateway'" >> $install_profile
	test "x$ks_dns1" != x && echo "_KS_dns1='$ks_dns1'" >> $install_profile
	test "x$ks_dns2" != x && echo "_KS_dns2='$ks_dns2'" >> $install_profile
	test "x$ks_use_dhcp" != x && echo "_KS_use_dhcp='$ks_use_dhcp'" >> $install_profile
	test "x$ks_use_ipv6" != x && echo "_KS_use_ipv6='$ks_use_ipv6'" >> $install_profile
	test "x$ks_use_grub_mbr" != x && echo "_KS_use_grub_mbr='$ks_use_grub_mbr'" >> $install_profile
	test "x$ks_welcome_head" != x && echo "_KS_welcome_head='$ks_welcome_head'" >> $install_profile
	test "x$ks_welcome_ks" != x && echo "_KS_welcome_ks='$ks_welcome_ks'" >> $install_profile
	test "x$ks_check_upgrade" != x && echo "_KS_check_upgrade='$ks_check_upgrade'" >> $install_profile
	test "x$ks_detect_removable" != x && echo "_KS_detect_removable='$ks_detect_removable'" >> $install_profile
	test "x$ks_auto_reboot" != x && echo "_KS_auto_reboot='$ks_auto_reboot'" >> $install_profile
	test "x$ks_time_zone" != x && echo "_KS_time_zone='$ks_time_zone'" >> $install_profile
	test "x$ks_kbd_type" != x && echo "_KS_kbd_type='$ks_kbd_type'" >> $install_profile
	test "x$ks_rootdisks" != x && echo "_KS_rootdisks='$ks_rootdisks'" >> $install_profile
	test "x$ks_rootdisk_type" != x && echo "_KS_rootdisk_type='$ks_rootdisk_type'" >> $install_profile
	test "x$ks_min_mem_required" != x && echo "_KS_min_mem_required='$ks_min_mem_required'" >> $install_profile
	test "x$ks_autopart_export_home" != x && echo "_KS_autopart_export_home='$ks_autopart_export_home'" >> $install_profile
	test "x$ks_autopart_manual" != x && echo "_KS_autopart_manual='$ks_autopart_manual'" >> $install_profile
	test "x$ks_autopart_use_swap_zvol" != x && echo "_KS_autopart_use_swap_zvol='$ks_autopart_use_swap_zvol'" >> $install_profile
	test "x$ks_need_network" != x && echo "_KS_need_network='$ks_need_network'" >> $install_profile
	test "x$ks_disable_motd" != x && echo "_KS_disable_motd='$ks_disable_motd'" >> $install_profile
	test "x$ks_disable_services" != x && echo "_KS_disable_services='$ks_disable_services'" >> $install_profile
	if test "x$ks_startup_wizard" != x; then
	        echo "_KS_startup_wizard='$ks_startup_wizard'" >> $install_profile
	        test "x$ks_show_wizard_license" != x && echo "_KS_show_wizard_license='$ks_show_wizard_license'" >> $install_profile
	fi
	if test "x$model_id" != x -a "x$model_name" != x; then
	        echo "package NZA::Model;" > /tmp/model.$$
	        echo "\$NZA::Model::ID='$model_id';" >> /tmp/model.$$
	        echo "\$NZA::Model::NAME='$model_name';" >> /tmp/model.$$
	        echo "\$NZA::Model::COMPANY_SNAME='$company_title';" >> /tmp/model.$$
	        echo "\$NZA::Model::PRODUCT_FAMILY='$product_title';" >> /tmp/model.$$
	        echo "1;" >> /tmp/model.$$
	        mv /tmp/model.$$ $rootdir$hddrepo/Model.pm
	        echo "_KS_model='Model.pm'" >> $install_profile

			cp $customdir/remote-logger.pl $rootdir$hddrepo/remote-logger
			chmod 744 $rootdir$hddrepo/remote-logger

			bin_dir="/usr/local/bin"
			if ! test -d $rootdir$bin_dir; then
				mkdir -p $rootdir$bin_dir
			fi
			cp $customdir/nabat-config $rootdir$bin_dir/nabat-config
			chmod 744 $rootdir$bin_dir/nabat-config

			# This file contains items for menu
			# that will be used in installer
			# to setup interface language
			cp $customdir/languages $rootdir$hddrepo
	fi

	if test "x$ks_license_text" != x; then
		if test -f $customdir/$ks_license_text; then
			cp $customdir/$ks_license_text $rootdir$hddrepo
			chmod 644 $rootdir$hddrepo/$ks_license_text
		fi
		echo "_KS_license_text='$ks_license_text'" >> $install_profile
	fi

	echo "_KS_inst_dist='installation'" >> $install_profile

cat << EOF
------------------------------------------------------------------------------
Initial local repository APT update ...
------------------------------------------------------------------------------
EOF

	FILESCD="$STAGE0_CD $STAGE0_DRIVERS $STAGE0_CD_END"

	$APT_GET update
	$APT_GET install -m -y --force-yes sunwcsd
	$APT_GET install -m -y --force-yes sunwcs shell-bash package-dpkg package-dpkg-apt
	$APT_GET install -m -y --force-yes $FILESCD
	$APT_GET install -f -y --force-yes
	$APT_GET clean

	# save list of packages for APT installation
	echo "$REQ_DEBS $STAGE0_APTINST $STAGE0_DRIVERS $STAGE0_CD_END $STAGE0_HDD_END" > $rootdir$hddrepo/aptinst.lst

	echo "Preparing hwdisco ... "
	cp $customdir/hwdisco.pl $rootdir$hddrepo/hwdisco

#	# Hack, because now chpasswd is not provided by any package
#	echo "Preparing chpasswd ... "
#	cp $customdir/chpasswd $rootdir/usr/sbin/chpasswd

	touch $rootdir/etc/login.defs

	echo "Preparing install scripts... "
	cp $customdir/$install_script $rootdir$hddrepo
	chmod 755 $rootdir$hddrepo/$install_script
	cp $customdir/eventhook $rootdir$hddrepo
	chmod 755 $rootdir$hddrepo/eventhook
	cp $customdir/nexenta-sysidtool* $rootdir$hddrepo
	chmod 755 $rootdir$hddrepo/nexenta-sysidtool*

	# Hack. Replacing scsi_vhci.conf for a newer one obtained from http://www.nex7.com/scsi_vhci.new
	cp -f $customdir/scsi_vhci.conf $rootdir$hddrepo
	cp -f $customdir/scsi_vhci.conf $rootdir/kernel/drv/scsi_vhci.conf

	mv $rootdir/lib/svc/method/console-login $rootdir/lib/svc/method/console-login.unmodified
	cp $customdir/nexenta-console-login $rootdir/lib/svc/method/console-login

	cp -f $customdir/nexenta-tetris $rootdir/usr/bin/tetris
	chmod 755 $rootdir/usr/bin/tetris
	cp -f $customdir/nexenta-log $rootdir/usr/bin/install-log
	chmod 755 $rootdir/usr/bin/install-log
	test "x$product_type" != "x" && product_title="$product_title $product_type"
	test "x$sw_version" != "x" && os_version="$os_version ($sw_version)"
	screen_title="$product_title $os_version"
	cat << EOF > $rootdir/root/.screenrc
bindkey -k k1 select 1
bindkey -k k2 select 2
bindkey -k k3 select 3
startup_message off
sorendition 04
hardstatus lastline "%{kB} %w %= | $screen_title"
screen -t Installer 1 $hddrepo/nexenta-install.sh
screen -t Shell     2
screen -t Log       3 /usr/bin/install-log
select 1
EOF
	chmod 644 $rootdir/root/.screenrc
	mv $rootdir/etc/syslog.conf $rootdir/etc/syslog.conf.unmodified
	cp $customdir/nexenta-syslog.conf $rootdir/etc/syslog.conf
	chmod 644 $rootdir/etc/syslog.conf
	cp -f $customdir/install-base.sh $rootdir$hddrepo/install-base.sh
	chmod 755 $rootdir$hddrepo/install-base.sh

	cp -f $customdir/$grub_hdd_menu_file $rootdir$hddrepo/hdd_grub-menu.txt
	sed -e "s/__autoversion__/$os_version, software $sw_version/" -i $rootdir$hddrepo/hdd_grub-menu.txt
else
	# LiveCD/DVD
	cat << EOF > $rootdir/etc/apt/sources.list
deb http://apt.gnusolaris.org elatte-testing main contrib non-free
deb-src http://apt.gnusolaris.org elatte-testing main contrib non-free
EOF
	for c in main contrib non-free; do
		list="$rootdir/var/lib/apt/lists/apt.gnusolaris.org_dists_elatte-unstable_${c}_binary-solaris-i386_Packages"
		if test -f $list; then
			mv $list $(echo $list|sed -e 's/unstable/testing/')
		else
			touch $(echo $list|sed -e 's/unstable/testing/')
		fi
	done
fi


echo "Polishing ... "

# special fix for bootstraping machine
for pid in `ps -ef | awk '/devfsadmd/ {print $2}'`; do
	if pfiles $pid 2>/dev/null | grep $rootdir >/dev/null; then
		kill -9 $pid
		break
	fi
done
sleep 2

rm -f $rootdir/etc/zfs/zpool.cache

# Fixing shadow...
chroot $environ pwconv
sed -i -e "s/^root:\*:/root::/" $rootdir/etc/shadow
rm -f $rootdir/etc/shadow- $rootdir/etc/shadow.org $rootdir/etc/passwd.org
# Make sure no kernel/user logging goes to the /dev/console
sed -i -e "/\/dev\/sysmsg/d" $rootdir/etc/syslog.conf
rm -f $rootdir/*.err
rm -f $rootdir/*.orig
rm -f $rootdir/core

# Cleanup logs and extra files
rm -rf $rootdir/var/cache/debconf
rm -rf $rootdir/var/log/bootstrap.log
rm -rf $rootdir/var/log/dpkg.log
rm -rf $rootdir/var/lib/dpkg/info
rm -f  $rootdir/var/cache/apt/archives/*.deb
rm -rf $rootdir/tmp/*

crle -u -c $rootdir/var/ld/ld.config -l /lib:/usr/lib:/usr/gnu/lib
crle -64 -u -c $rootdir/var/ld/64/ld.config -l /lib/64:/usr/lib/64:/usr/gnu/lib/64

devfsadm -r $rootdir -u

CWD=`dirname $0`
$CWD/nbld-livecd || abort
