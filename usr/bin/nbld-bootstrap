#!/bin/bash
#
# This program will generate initial root based on required and
# base packages's Priority field.
# It is tightly integreated into Debian bootstrapping technology.
#
# It uses three main components:
#    1) apt
#    2) reprepro
#    3) debootstrap
#
# Therefore it is required those packages to be pre-installed.
# Apt repository is also required.
#
##############################################################################
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (C) 2005-2011 Nexenta Systems, Inc.
# All rights reserved.
#
##############################################################################

test -f /etc/nbld.cf || (echo "Error: can't find /etc/nbld.cf" && exit 1)
. /etc/nbld.cf

build_number="$NBLD_BUILD_NUMBER"       # Nightly build number
repo="$NBLD_REPO"		        # APT repository (must exist)
dist="$NBLD_DISTRO-$NBLD_BRANCH"	# IN repository's distribution name
distro=$NBLD_DISTRO
rootdir="$NBLD_MINIROOT"                # bootstrap output
hddrepo="/usr/nexenta"	        	# APT repository for HDD mode
customdir="$NBLD_LIBDIR"	        # directory with data files
extra_dir="/var/lib/nbld"		# directory with extra data files
debug="$NBLD_DEBUG"		        # default no debug mode
mode="$NBLD_DEFAULT_MODE"	        # no default mode
grub_hdd_menu_file="${mode}_hdd_grub-menu.txt"
install_script=nexenta-install.sh
install_profile="$rootdir$hddrepo/defaults"
pkglist="$NBLD_TMP/debootstrap-pkglist.tmp"

product_title="NexentaOS"
apt_sources="http://apt.gnusolaris.org elatte-testing main contrib non-free"

# do not show license by default
ks_license_text=""

profile0="minimal"
lines0="1800"
desc0="Recommended for advanced users only"
longdesc0="Minimal profile will setup a bare minimum Console-only NexentaOS system which later could be customized by using dselect/apt-get utilities."
rootsize0="512"

profile1="desktop"
lines1="4200"
desc1="Recommended for most users setups"
longdesc1="Desktop profile will setup typical desktop system with GNOME. Desktop profile is recommended option."
rootsize1="2048"

profiles="0 1"
defprofile="1"

usage() {
	cat << EOF
Usage: nbld-bootstrap [--rootdir dir] [--debug] [--repo dir] [--dist name]
EOF
	exit 1
}
fatal() { echo "Error: $1"; exit 1; }
cleanup() { umount /etc/mnttab 2>/dev/null; umount $rootdir/proc 2>/dev/null; }
abort() { echo "Error: subprocess exited with non-zero status: $?"; exit 1; }
trap "cleanup" INT EXIT TERM QUIT
trap "abort" ERR

UUID=`id -u`
#if [ `whoami` != "root" ]; then
if [ $UUID != "0" ]; then
	echo "Insufficient privileges to run $0"
	exit 1
fi

while test "x$1" != x; do
	if test "x$1" = "x--debug"; then debug=yes;
	elif test "x$1" = "x--repo"; then repo=$2; shift;
	elif test "x$1" = "x--dist"; then dist=$2; shift;
	elif test "x$1" = "x--rootdir"; then rootdir=$2; shift;
	elif test "x$1" = "x--help" -o "x$1" = "x-h"; then usage;
	else usage; fi
	shift
done

# Recalculate some globals
install_profile="$rootdir$hddrepo/defaults"
environ="$rootdir /usr/bin/env -i PATH=/usr/gnu/bin:/usr/bin:/sbin:/usr/sbin LOGNAME=root HOME=/root TERM=xterm"

if mount | grep $rootdir 1>/dev/null 2>&1 && test -d $rootdir; then
	echo "Error: $rootdir is busy. has loopback mounted dirs."
	exit 1
fi

test -d $rootdir && umount $rootdir/proc 2>/dev/null

if test -f $customdir/$mode.profile; then
	. $customdir/$mode.profile
elif test -f $mode.profile; then
	. $mode.profile
else
	echo "Error: $mode.profile not found."
	exit 1
fi

cat << EOF
==============================================================================
Mode:       ${mode}
Repository: ${repo} (${dist})
Fakeroot:   ${rootdir}
==============================================================================
EOF

echo -n "Live-CD/DVD mode is "
if test "x$mode_type" = xlivecd; then
	echo "ON"
else
	echo "OFF"
fi

echo -n "Generic install mode is "
if test "x$mode_type" = xinstall; then
	echo "ON"
else
	echo "OFF"
fi

echo "Selected Mode is $mode"
export BOOTSTRAP_EXTRA_DEBS="$LOCAL_ARCHIVE_DEBS ${REQ_DEBS}"
export STAGE0_DEBS="$STAGE0_DEBS ${REQ_DEBS} $STAGE0_APTINST $STAGE0_CD $STAGE0_DRIVERS $STAGE0_CD_END $STAGE0_HDD_END"

# From now on selected do 'install' or 'livecd' type
mode=$mode_type

echo -n "Debug mode is "
if test "x$debug" = xyes; then
	echo "ON"
else
	echo "OFF"
fi

echo "Cleaning up $rootdir ... "
test -d $rootdir && rm -rf $rootdir
mkdir -p $rootdir

if test "x$mode" = xinstall; then
	cat << EOF
------------------------------------------------------------------------------
Generating InstallCD filelist...
------------------------------------------------------------------------------
EOF
export BOOTSTRAP_REQUIRED="package-dpkg package-dpkg-apt"

	pkglist="$NBLD_TMP/debootstrap-pkglist.installcd.tmp"
	/bin/bash debootstrap \
		    --verbose \
		    --arch solaris-i386 \
		    --components=main,contrib,non-free \
		    --resolve-deps \
		    --print-debs \
		    $dist \
		    $rootdir \
		    $repo \
		    $customdir/$distro.bootstrap >$pkglist ||
		fatal "couldn't generate package list for InstallCD"
	cat << EOF
------------------------------------------------------------------------------
Downloading package archive...
------------------------------------------------------------------------------
EOF
BOOTSTRAP_REQUIRED=`cat $pkglist`
BOOTSTRAP_REQUIRED="$BOOTSTRAP_REQUIRED $STAGE0_DEBS"

	export BOOTSTRAP_REQUIRED BOOTSTRAP_BASE
	/bin/bash debootstrap \
		    --verbose \
		    --arch solaris-i386 \
		    --components=main,contrib,non-free \
		    --keep-debootstrap-dir \
		    --resolve-deps \
		    --download-only \
		    $dist \
		    $rootdir \
		    $repo \
		    $customdir/$distro.bootstrap ||
		fatal "couldn't complete bootstrap of the InstallCD archive"
	echo $BOOTSTRAP_REQUIRED > /tmp/required-$profile1.lst
	echo $BOOTSTRAP_BASE > /tmp/base-$profile1.lst
	cp $rootdir/debootstrap/debpaths /tmp
	mv $rootdir/var/cache/apt/archives $rootdir/var/cache/stage0_archive
	rm -rf $rootdir/var/cache/apt
	rm -rf $rootdir/debootstrap
	export BOOTSTRAP_EXTRA_DEBS="$STAGE0_DEBS"
	if test "x$HDD_EXCLUDE_DEBS" != x; then
		for excl_deb in `echo $HDD_EXCLUDE_DEBS|sed -e "s/ /\n/"`; do
			find $rootdir/var/cache/stage0_archive -name "$excl_deb""_*.deb" | xargs rm
			sed -e "/^$excl_deb/d" -i /tmp/required-$profile1.lst
			sed -e "/^$excl_deb/d" -i /tmp/base-$profile1.lst
			sed -e "/^$excl_deb/d" -i /tmp/debpaths
		done
	fi
fi

cat << EOF
------------------------------------------------------------------------------
Generating a $profile0 profile filelist...
------------------------------------------------------------------------------
EOF
pkglist="$NBLD_TMP/debootstrap-pkglist.profile0.tmp"
export BOOTSTRAP_REQUIRED= BOOTSTRAP_BASE=$MINIMAL_CMN_DEBS
export FAKEROOT=yes
/bin/bash debootstrap \
	    --verbose \
	    --arch solaris-i386 \
	    --components=main,contrib,non-free \
	    --keep-debootstrap-dir \
	    --resolve-deps \
	    --print-debs \
	    $dist \
	    $rootdir \
	    $repo \
	    $customdir/$distro.bootstrap >$pkglist ||
	fatal "couldn't complete a $mode-mode filelist generation phase"
BOOTSTRAP_BASE_MINIMAL=$(cat $pkglist|egrep "^Base:"|sed -e "s/^Base: //")
echo "Selected `echo $BOOTSTRAP_BASE|sed -e "s/\s/\n/g"|wc -l` base packages"

cat << EOF
------------------------------------------------------------------------------
Generating a $mode-mode  filelist...
------------------------------------------------------------------------------
EOF
pkglist="$NBLD_TMP/debootstrap-pkglist.mode.tmp"
export BOOTSTRAP_REQUIRED= BOOTSTRAP_BASE=
export FAKEROOT=yes
/bin/bash debootstrap \
	    --verbose \
	    --arch solaris-i386 \
	    --components=main,contrib,non-free \
	    --keep-debootstrap-dir \
	    --resolve-deps \
	    --print-debs \
	    $dist \
	    $rootdir \
	    $repo \
	    $customdir/$distro.bootstrap >$pkglist ||
	fatal "couldn't complete a $mode-mode filelist generation phase"
BOOTSTRAP_REQUIRED=$(cat $pkglist|egrep "^Required:"|sed -e "s/^Required: //")
BOOTSTRAP_BASE=$(cat $pkglist|egrep "^Base:"|sed -e "s/^Base: //")
echo "Selected `echo $BOOTSTRAP_REQUIRED|sed -e "s/\s/\n/g"|wc -l` required packages"
echo "Selected `echo $BOOTSTRAP_BASE|sed -e "s/\s/\n/g"|wc -l` base packages"
echo $BOOTSTRAP_REQUIRED > /tmp/required-$profile0.lst
echo $(echo $BOOTSTRAP_BASE_MINIMAL $BOOTSTRAP_BASE | sed -e "s/\s/\n/g"| sort -u) > /tmp/base-$profile0.lst
cat << EOF
------------------------------------------------------------------------------
Bootstrapping $mode CD media...
------------------------------------------------------------------------------
EOF
export BOOTSTRAP_REQUIRED BOOTSTRAP_BASE
export FAKEROOT=yes
/bin/bash /usr/sbin/debootstrap \
	    --verbose \
	    --arch solaris-i386 \
	    --components=main,contrib,non-free \
	    --keep-debootstrap-dir \
	    --resolve-deps \
	    $dist \
	    $rootdir \
	    $repo \
	    $customdir/$distro.bootstrap || fatal "couldn't complete bootstrap"
if test "x$mode" = "xinstall"; then
	echo "Creating local repository... "
	test -d $rootdir$hddrepo || mkdir $rootdir$hddrepo
	mkdir $rootdir$hddrepo/conf
	cat << EOF > $rootdir$hddrepo/conf/distributions
Origin: Installation APT
Codename: installation
Architectures: solaris-i386
Components: main contrib non-free
DebIndices: Packages Release . .gz .bz2
Description: Installation repository
EOF

	for file in `ls -1 $rootdir/var/cache/stage0_archive/*.deb`; do
		reprepro --ignore=wrongdistribution -b $rootdir$hddrepo --export=never includedeb installation $file >/tmp/reprepro.log.$$ 2>&1 || exit 1
	done
	reprepro -b $rootdir$hddrepo export installation || exit 1

	rm -rf $rootdir/var/cache/stage0_archive
	rm -f $rootdir/var/cache/apt/archive/*.deb

	echo "deb file://$hddrepo installation main contrib non-free" > \
		$rootdir/etc/apt/sources.list

	echo "Copying pre-generated filelists... "
	mv /tmp/required-$profile1.lst $rootdir$hddrepo
	mv /tmp/base-$profile1.lst $rootdir$hddrepo
	mv /tmp/required-$profile0.lst $rootdir$hddrepo
	mv /tmp/base-$profile0.lst $rootdir$hddrepo
	rm -f $install_profile
	test "x$ks_scripts" != x && cat $customdir/$ks_scripts >> $install_profile
	echo "_KS_product_title='$product_title'" >> $install_profile
	for p in $profiles; do
		eval "echo \"_KS_profile_name[$p]='\$profile$p'\"" >> $install_profile
		eval "echo \"_KS_profile_lines[$p]='\$lines$p'\"" >> $install_profile
		eval "echo \"_KS_profile_desc[$p]='\$desc$p'\"" >> $install_profile
		eval "echo \"_KS_profile_longdesc[$p]='\$longdesc$p'\"" >> $install_profile
		eval "echo \"_KS_profile_rootsize[$p]='\$rootsize$p'\"" >> $install_profile
	done
	echo "_KS_profiles='$profiles'" >> $install_profile
	for i in $ks_ifaces; do
		eval "echo \"_KS_iface_ip[$i]='\$ks_iface_ip$i'\"" >> $install_profile
		eval "echo \"_KS_iface_mask[$i]='\$ks_iface_mask$i'\"" >> $install_profile
	done
	echo "_KS_ifaces='$ks_ifaces'" >> $install_profile
	echo "_KS_apt_sources='$apt_sources'" >> $install_profile
	test "x$build_number" != x && echo "_KS_build_number='build $build_number'" >> $install_profile
	test "x$plugin_sources" != x && echo "_KS_plugin_sources='$plugin_sources'" >> $install_profile
	echo "_KS_profile_selected='$defprofile'" >> $install_profile
	test "x$ks_root_passwd" != x && echo "_KS_root_passwd='$ks_root_passwd'" >> $install_profile
	test "x$ks_user_name" != x && echo "_KS_user_name='$ks_user_name'" >> $install_profile
	test "x$ks_user_passwd" != x && echo "_KS_user_passwd='$ks_user_passwd'" >> $install_profile
	test "x$ks_hostname" != x && echo "_KS_hostname='$ks_hostname'" >> $install_profile
	test "x$ks_domainname" != x && echo "_KS_domainname='$ks_domainname'" >> $install_profile
	test "x$ks_gateway" != x && echo "_KS_gateway='$ks_gateway'" >> $install_profile
	test "x$ks_dns1" != x && echo "_KS_dns1='$ks_dns1'" >> $install_profile
	test "x$ks_dns2" != x && echo "_KS_dns2='$ks_dns2'" >> $install_profile
	test "x$ks_use_dhcp" != x && echo "_KS_use_dhcp='$ks_use_dhcp'" >> $install_profile
	test "x$ks_use_ipv6" != x && echo "_KS_use_ipv6='$ks_use_ipv6'" >> $install_profile
	test "x$ks_use_grub_mbr" != x && echo "_KS_use_grub_mbr='$ks_use_grub_mbr'" >> $install_profile
	test "x$ks_welcome_head" != x && echo "_KS_welcome_head='$ks_welcome_head'" >> $install_profile
	test "x$ks_welcome_ks" != x && echo "_KS_welcome_ks='$ks_welcome_ks'" >> $install_profile
	test "x$ks_check_upgrade" != x && echo "_KS_check_upgrade='$ks_check_upgrade'" >> $install_profile
	test "x$ks_detect_removable" != x && echo "_KS_detect_removable='$ks_detect_removable'" >> $install_profile
	test "x$ks_auto_reboot" != x && echo "_KS_auto_reboot='$ks_auto_reboot'" >> $install_profile
	test "x$ks_time_zone" != x && echo "_KS_time_zone='$ks_time_zone'" >> $install_profile
	test "x$ks_kbd_type" != x && echo "_KS_kbd_type='$ks_kbd_type'" >> $install_profile
	test "x$ks_rootdisks" != x && echo "_KS_rootdisks='$ks_rootdisks'" >> $install_profile
	test "x$ks_rootdisk_type" != x && echo "_KS_rootdisk_type='$ks_rootdisk_type'" >> $install_profile
	test "x$ks_min_mem_required" != x && echo "_KS_min_mem_required='$ks_min_mem_required'" >> $install_profile
	test "x$ks_autopart_export_home" != x && echo "_KS_autopart_export_home='$ks_autopart_export_home'" >> $install_profile
	test "x$ks_autopart_manual" != x && echo "_KS_autopart_manual='$ks_autopart_manual'" >> $install_profile
	test "x$ks_autopart_use_swap_zvol" != x && echo "_KS_autopart_use_swap_zvol='$ks_autopart_use_swap_zvol'" >> $install_profile
	test "x$ks_need_network" != x && echo "_KS_need_network='$ks_need_network'" >> $install_profile
	test "x$ks_disable_motd" != x && echo "_KS_disable_motd='$ks_disable_motd'" >> $install_profile
	test "x$ks_disable_services" != x && echo "_KS_disable_services='$ks_disable_services'" >> $install_profile
	if test "x$ks_startup_wizard" != x; then
	        echo "_KS_startup_wizard='$ks_startup_wizard'" >> $install_profile
	        test "x$ks_show_wizard_license" != x && echo "_KS_show_wizard_license='$ks_show_wizard_license'" >> $install_profile
	fi
	if test "x$model_id" != x -a "x$model_name" != x; then
	        echo "package NZA::Model;" > /tmp/model.$$
	        echo "\$NZA::Model::ID='$model_id';" >> /tmp/model.$$
	        echo "\$NZA::Model::NAME='$model_name';" >> /tmp/model.$$
	        echo "\$NZA::Model::COMPANY_SNAME='$company_title';" >> /tmp/model.$$
	        echo "\$NZA::Model::PRODUCT_FAMILY='$product_title';" >> /tmp/model.$$
	        echo "1;" >> /tmp/model.$$
	        mv /tmp/model.$$ $rootdir$hddrepo/Model.pm
	        echo "_KS_model='Model.pm'" >> $install_profile

			cp $customdir/remote-logger.pl $rootdir$hddrepo/remote-logger
			chmod 744 $rootdir$hddrepo/remote-logger

			bin_dir="/usr/local/bin"
			if ! test -d $rootdir$bin_dir; then
				mkdir -p $rootdir$bin_dir
			fi
			cp $customdir/nabat-config $rootdir$bin_dir/nabat-config
			chmod 744 $rootdir$bin_dir/nabat-config

			# This file contains items for menu
			# that will be used in installer
			# to setup interface language
			cp $customdir/languages $rootdir$hddrepo
	fi

	if test "x$ks_license_text" != x; then
		if test -f $customdir/$ks_license_text; then
			cp $customdir/$ks_license_text $rootdir$hddrepo
			chmod 644 $rootdir$hddrepo/$ks_license_text
		fi
		echo "_KS_license_text='$ks_license_text'" >> $install_profile
	fi

	echo "_KS_inst_dist='installation'" >> $install_profile

	echo "Initial local repository APT update ... "

	unset FAKEROOT
	DEBCONF_FRONTEND=noninteractive
	DEBCONF_NONINTERACTIVE_SEEN=true
	export DEBCONF_FRONTEND DEBCONF_NONINTERACTIVE_SEEN

	chroot $environ mount -F proc /proc

	chroot $environ apt-key update
	chroot $environ apt-get update
	chroot $environ apt-get -y install -f --force-yes

#	# Hack needed to install x11* packages.
	chroot $environ apt-key update
	chroot $environ rm -f /etc/apt/apt.conf.d/01icore
	chroot $environ apt-get -o APT::Immediate-Configure=off -y install -f --force-yes
	chroot $environ rm -f /etc/apt/apt.conf.d/01icore
#	# End of hack

	APTCMD="apt-get -y --force-yes install"
	FILESCD="$STAGE0_CD $STAGE0_DRIVERS $STAGE0_CD_END"
	chroot $environ $APTCMD $FILESCD

	# save list of packages for APT installation
	echo "$STAGE0_APTINST $STAGE0_DRIVERS $STAGE0_HDD_END $ADD_PLUGINS" > $rootdir$hddrepo/aptinst.lst

	echo "Preparing hwdisco ... "
	cp $customdir/hwdisco.pl $rootdir$hddrepo/hwdisco

#	# Hack, because now chpasswd is not provided by any package
#	echo "Preparing chpasswd ... "
#	cp $customdir/chpasswd $rootdir/usr/sbin/chpasswd

	touch $rootdir/etc/login.defs

	echo "Preparing install scripts... "
	cp $customdir/$install_script $rootdir$hddrepo
	chmod 755 $rootdir$hddrepo/$install_script
	cp $customdir/eventhook $rootdir$hddrepo
	chmod 755 $rootdir$hddrepo/eventhook
	cp $customdir/nexenta-sysidtool* $rootdir$hddrepo
	chmod 755 $rootdir$hddrepo/nexenta-sysidtool*

	mv $rootdir/lib/svc/method/console-login $rootdir/lib/svc/method/console-login.unmodified
	cp $customdir/nexenta-console-login $rootdir/lib/svc/method/console-login

	cp -f $customdir/nexenta-tetris $rootdir/usr/bin/tetris
	chmod 755 $rootdir/usr/bin/tetris
	cp -f $customdir/nexenta-log $rootdir/usr/bin/install-log
	chmod 755 $rootdir/usr/bin/install-log
	screen_title="$product_title $os_version"
	test "x$sw_version" != "x" && screen_title="$screen_title, software $sw_version"
	cat << EOF > $rootdir/root/.screenrc
bindkey -k k1 select 1
bindkey -k k2 select 2
bindkey -k k3 select 3
startup_message off
sorendition 04
hardstatus lastline "%{kB} %w %= | $screen_title"
screen -t Installer 1 /usr/nexenta/nexenta-install.sh
screen -t Shell     2
screen -t Log       3 /usr/bin/install-log
select 1
EOF
	chmod 644 $rootdir/root/.screenrc
	mv $rootdir/etc/syslog.conf $rootdir/etc/syslog.conf.unmodified
	cp $customdir/nexenta-syslog.conf $rootdir/etc/syslog.conf
	chmod 644 $rootdir/etc/syslog.conf
	echo "export TERMINFO=/usr/share/lib/terminfo" >> $rootdir/root/.bash_profile
	echo "export TERM=sun-color" >> $rootdir/root/.bash_profile

	cp -f $customdir/install-base.sh $rootdir$hddrepo/install-base.sh
	chmod 755 $rootdir$hddrepo/install-base.sh

	cp -f $customdir/$grub_hdd_menu_file $rootdir$hddrepo/hdd_grub-menu.txt
	sed -e "s/__autoversion__/$os_version, software $sw_version/" -i $rootdir$hddrepo/hdd_grub-menu.txt
else
	# LiveCD/DVD
	cat << EOF > $rootdir/etc/apt/sources.list
deb http://apt.gnusolaris.org elatte-testing main contrib non-free
deb-src http://apt.gnusolaris.org elatte-testing main contrib non-free
EOF
	for c in main contrib non-free; do
		list="$rootdir/var/lib/apt/lists/apt.gnusolaris.org_dists_elatte-unstable_${c}_binary-solaris-i386_Packages"
		if test -f $list; then
			mv $list $(echo $list|sed -e 's/unstable/testing/')
		else
			touch $(echo $list|sed -e 's/unstable/testing/')
		fi
	done
fi

# do not trigger postinst.sh
rm -f $rootdir/tmp/nlubin/env.sh

if test "x$mode" = xbase; then
	# do some base mode customizations
	baserepo=$repo
	cat << EOF > $rootdir/etc/apt/sources.list
deb file://$baserepo/ $dist main non-free contrib
deb-src file://$baserepo/ $dist main non-free contrib
EOF
	mv "$rootdir/sbin/start-stop-daemon" "$rootdir/sbin/start-stop-daemon.REAL"

	echo \
"#!/bin/sh

echo
echo \"Warning: Fake start-stop-daemon called, doing nothing\"" > "$rootdir/sbin/start-stop-daemon"
	chmod 755 "$rootdir/sbin/start-stop-daemon"
	cp /usr/bin/hackzone-build $rootdir/usr/bin
	cp /usr/bin/hackzone-env.sh $rootdir/usr/bin
	mkdir -p $rootdir/usr/local/bin
	cp $customdir/gpg-nexenta $rootdir/usr/local/bin
	tar -C $rootdir/root -xf $customdir/gnupg-info.tar
	chown -R root $rootdir/root/.gnupg
	mkdir -p $rootdir${baserepo}
	mount -F lofs -O $baserepo $rootdir${baserepo}
	readline_common_deb=`find $baserepo/dists/$dist -name "readline-common_*.deb"`
	chroot $environ dpkg -i $readline_common_deb
	libreadline_deb=`find $baserepo/dists/$dist -name "libreadline5_*.deb"`
	chroot $environ dpkg -i $libreadline_deb
	gnupg_deb=`find $baserepo/dists/$dist -name "gnupg_*.deb"`
	chroot $environ dpkg -i $gnupg_deb
	chroot $environ apt-get update
	chroot $environ apt-get -y install debhelper
	chroot $environ apt-get -y install nexenta-keyring
	chroot $environ apt-get -y install subversion
	chroot $environ apt-get -y install dpkg-dev
	chroot $environ apt-get -y install gcc
	chroot $environ apt-get -y install vim
	chroot $environ apt-get -y install cpp
	chroot $environ apt-get -y install g++
	chroot $environ apt-get -y install developer-linker
	chroot $environ apt-get -y install devscripts
	chroot $environ apt-get -y install reprepro
	chroot $environ apt-get -y install gnome-devel
	chroot $environ apt-get -y install kdelibs-bin
	chroot $environ apt-get -y install libqt3-mt-dev
	chroot $environ apt-get -y install kde-devel
	chroot $environ apt-get -y install libarts1-dev
	chroot $environ apt-get -y install libartsc0-dev
	chroot $environ apt-get -y install lib64gcc1
	chroot $environ apt-get -y install dbs
	chroot $environ apt-get -y install python-sqlite
	chroot $environ apt-get -y install diffstat
	chroot $environ apt-get -y install liburi-perl
	chroot $environ apt-get -y install dput
	chroot $environ apt-get -y install zlib1g
	cp /etc/dput.cf $rootdir/etc
	sed -i "s/\#PS1/PS1/" $rootdir/root/.bashrc
	echo "ps -ef >/dev/null 2>&1 || mount /proc" >> $rootdir/root/.bashrc
	echo "82.211.81.182   gb.archive.ubuntu.com" >> $rootdir/etc/hosts
	echo "82.211.81.182   archive.ubuntu.com" >> $rootdir/etc/hosts
	echo "213.133.98.126  packages.ubuntu.com" >> $rootdir/etc/hosts
	chroot $environ apt-get -y install wget
	umount $rootdir${baserepo} 2>/dev/null
else
	if test "x$STAGE0_EXCLUDE_DEBS" != x -a "x$mode" != xlivecd; then

		echo "Remove excluded packages ... "

		# save some bins...
		cp $rootdir/usr/bin/rmformat /tmp/rmformat.saved
		cp $rootdir/usr/lib/libsmedia.so.1 /tmp/libsmedia.so.1.saved
		cp -ar $rootdir/usr/lib/smedia /tmp/smedia.saved

		# remove what is not needed...
		chroot $environ mount /proc
		chroot $environ apt-get -y remove $STAGE0_EXCLUDE_DEBS
		if ! test -f $rootdir/usr/bin/vi; then
			ln -s vedit $rootdir/usr/bin/vi
		fi
		chroot $environ umount /proc 2>/dev/null

		# restore bins...
		mv /tmp/rmformat.saved $rootdir/usr/bin/rmformat
		mv /tmp/libsmedia.so.1.saved $rootdir/usr/lib/libsmedia.so.1
		mv /tmp/smedia.saved $rootdir/usr/lib/smedia
	fi
fi

echo "Polishing ... "

# special fix for bootstraping machine
for pid in `ps -ef | awk '/devfsadmd/ {print $2}'`; do
	if pfiles $pid 2>/dev/null | grep $rootdir >/dev/null; then
		kill -9 $pid
		break
	fi
done
sleep 2

rm -f $rootdir/etc/zfs/zpool.cache

# Fixing shadow...
chroot $environ pwconv
sed -i -e "s/^root:\*:/root::/" $rootdir/etc/shadow
rm -f $rootdir/etc/shadow- $rootdir/etc/shadow.org $rootdir/etc/passwd.org
# Make sure no kernel/user logging goes to the /dev/console
sed -i -e "/\/dev\/sysmsg/d" $rootdir/etc/syslog.conf
rm -f $rootdir/*.err
rm -f $rootdir/*.orig
rm -f $rootdir/core
find $rootdir/usr -type d -name ".svn" | xargs rm -rf
if test "x$debug" != xyes; then
	rm -f $rootdir/var/cache/apt/archives/*.deb
	rm -f $rootdir/var/cache/apt/*.bin
	latest_log=/tmp/debootstrap.log.latest.$$
	cp $rootdir/debootstrap/debootstrap.log $latest_log
	rm -rf $rootdir/debootstrap
else
	latest_log=/tmp/debootstrap.log.latest.$$
	cp $rootdir/debootstrap/debootstrap.log $latest_log
	rm -rf $rootdir/debootstrap
fi
# Cleanup logs and extra files
rm -rf $rootdir/var/cache/debconf
rm -rf $rootdir/var/log/bootstrap.log
rm -rf $rootdir/var/log/dpkg.log
rm -rf $rootdir/var/lib/dpkg/info
rm -f $rootdir/var/cache/apt/archives/*.deb
rm -rf $rootdir/tmp/*
echo "NOTE: log file saved at $latest_log"

crle -u -c $rootdir/var/ld/ld.config -l /lib:/usr/lib:/usr/gnu/lib
crle -64 -u -c $rootdir/var/ld/64/ld.config -l /lib/64:/usr/lib/64:/usr/gnu/lib/64

devfsadm -r $rootdir -u

CWD=`dirname $0`
$CWD/nbld-livecd || exit 1
