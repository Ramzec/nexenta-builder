#!/usr/bin/perl -w
#
# Copyright (C) 2006-2010 Nexenta Systems, Inc.
# All rights reserved.
#

use strict;
use warnings;

my $ON = "on";
my $OFF = "off";

my $INFORMATION 	= "Information";
my $ERROR 		= "Error";
my $QUESTION 		= "Question";

my $OK_BUTTON 		= "OK";
my $NEXT_BUTTON 	= "NEXT";
my $EXIT_BUTTON 	= "EXIT";
my $CANCEL_BUTTON 	= "CANCEL";

my $MACHINE_CONFIG_FILE = "/root/mut-record.pm";

my $dialog_cmd = "TERM=sun-color dialog --backtitle NABAT-Configurator --keep-window --colors --no-signals --no-escape";
my $dialog_cmd_with_escape = "TERM=sun-color dialog --backtitle NABAT-Configurator --keep-window --colors --no-signals";
system("clear");

start:
system("rm -f $MACHINE_CONFIG_FILE");

# Request information about disks subsystem
#
my %syspool_luns = ();
my %syspool_spare = ();
my %data_volume = ();
my %test_volume = ();
while(1) {
	info_box($dialog_cmd, "Detecting available disks...");
	my $disks_info = get_disks_info();
	my @tmp = ();
	for my $disk (keys %$disks_info) {
		push @tmp, "\"$disk\" \"$disks_info->{$disk}->{disk_size} ($disks_info->{$disk}->{disk_vendor})\" $OFF";
	}
	my $rlist = join(' ', @tmp);
	my @result = checklist_box($dialog_cmd, 
			    "Disk subsystem", 
			    "\nPlease select disk(s) (no more than 3 same-size disks) to be used as a \'syspool\'", 
			    $rlist, 
			    $NEXT_BUTTON, $EXIT_BUTTON);
	if (scalar @result == 0) {
		msg_box($dialog_cmd, 
			"\nNo disks are selected.\nPlease select one or more disks.",
			$ERROR);
		next;
	}
	exit 0 if(!$result[0]);
	for my $disk (@result) {
		$syspool_luns{$disk} = $disks_info->{$disk};
		$disks_info->{$disk} = undef; 
		delete $disks_info->{$disk};
		print keys %syspool_luns;
		print "\n";
		print "$disks_info->{$disk}\n";
	}
	last if (!scalar keys %$disks_info);
	my $rc = msg_box_yes_no_ask($dialog_cmd, "Do you want to select disks for syspool spare?", 
				    $QUESTION, 0, 70, 7);
	if (!$rc) {
		while(1) {
			@tmp = ();
			for my $disk (keys %$disks_info) {
				push @tmp, "\"$disk\" \"$disks_info->{$disk}->{disk_size} ($disks_info->{$disk}->{disk_vendor})\" $OFF";
			}
			$rlist = join(' ', @tmp);
			@result = checklist_box($dialog_cmd, 
					    "Disk subsystem", 
					    "\nPlease select disk(s) to be used as \'hot-spare\' for the \'syspool\'", 
					    $rlist, 
					    $NEXT_BUTTON, $CANCEL_BUTTON);
			if (scalar @result == 0) {
				msg_box($dialog_cmd, 
					"\nNo disks are selected.\nPlease select one or more disks.",
					$ERROR);
				next;
			}
			last if(!$result[0]);
			for my $disk (@result) {
				$syspool_spare{$disk} = $disks_info->{$disk};
				$disks_info->{$disk} = undef;
				delete $disks_info->{$disk};
			}
			last;
		}
	} 
	if (!scalar keys %$disks_info) {
		msg_box($dialog_cmd, 
			"\nNo free disks found to create 'data' volume.\nPlease reconfigure disk subsystem.",
			$ERROR);
		next;
	}
	while(1) {
		@tmp = ();
		for my $disk (keys %$disks_info) {
			push @tmp, "\"$disk\" \"$disks_info->{$disk}->{disk_size} ($disks_info->{$disk}->{disk_vendor})\" $OFF";
		}
		$rlist = join(' ', @tmp);
		@result = checklist_box($dialog_cmd, 
				    "Disk subsystem", 
				    "\nPlease select disk(s) to be use as \'data-volume\'", 
				    $rlist, 
				    $NEXT_BUTTON, $EXIT_BUTTON);
		if (scalar @result == 0) {
			msg_box($dialog_cmd, 
				"\nNo disks are selected.\nPlease select one or more disks.",
				$ERROR);
			next;
		}
		exit if(!$result[0]);
		for my $disk (@result) {
			$data_volume{$disk} = $disks_info->{$disk};
			$disks_info->{$disk} = undef;
			delete $disks_info->{$disk};
		}
		last;
	}
	if (!scalar keys %$disks_info) {
		msg_box($dialog_cmd, 
			"\nNo free disks found to create a 'test' volume.\nPlease reconfigure disk subsystem.",
			$ERROR);
		last;
	}
	while(1) {
		@tmp = ();
		for my $disk (keys %$disks_info) {
			push @tmp, "\"$disk\" \"$disks_info->{$disk}->{disk_size} ($disks_info->{$disk}->{disk_vendor})\" $OFF";
		}
		$rlist = join(' ', @tmp);
		@result = checklist_box($dialog_cmd, 
				    "Disk subsystem", 
				    "\nPlease select disk(s) to be used as \'test-volume\'", 
				    $rlist, 
				    $NEXT_BUTTON, $EXIT_BUTTON);
		if (scalar @result == 0) {
			msg_box($dialog_cmd, 
				"\nNo disks are selected.\nPlease select one or more disks.",
				$ERROR);
			next;
		}
		exit 0 if(!$result[0]);
		for my $disk (@result) {
			$test_volume{$disk} = $disks_info->{$disk};
			$disks_info->{$disk} = undef;
			delete $disks_info->{$disk};
		}
		last;
	}
	last;
}

# Request information about network subsystem
#

my %nics_configured;
while(1) {
	my $nics_info = get_nics_info();
	my @tmp = ();
	for my $nic (keys %$nics_info) {
		push @tmp, "\"$nic\" \"MAC: $nics_info->{$nic}->{nic_mac}\" $OFF";
	}
	my $rlist = join(' ', @tmp);
	my $res = radiolist_box($dialog_cmd, 
			    "Network subsystem", 
			    "\nPlease select NIC to be used as \'primary\' for NABAT", 
			    $rlist, 
			    $NEXT_BUTTON, $EXIT_BUTTON);
	exit 0 if ($res eq 'exit');
	if (!$res) {
		msg_box($dialog_cmd, 
			"\nNo NIC is selected.\nPlease select a NIC.",
			$ERROR);
		next;
	}
	my $nic = $res;
	my @form_data = ();
	push @form_data, "\"IP Address:\" 2 2 \"\" 2 16 15 15";
	push @form_data, "\"Netmask:\" 4 2 \"\" 4 16 15 15";
	my @result = input_form($dialog_cmd,
				"Interface settings for $nic",
				"\nStatic address configuration:",
				\@form_data,
				$NEXT_BUTTON, $EXIT_BUTTON);
	exit 0 if(!$result[0]);
	if(!check_ip_format($result[0]) || !check_ip_format($result[1])) {
		msg_box($dialog_cmd, 
			"\nIncorrect format of IP or NETMASK.",
			$ERROR);
		next;
	}
	$nics_configured{$nic} = $nics_info->{$nic};
	$nics_configured{$nic}->{ipaddr} = $result[0];
	$nics_configured{$nic}->{netmask} = $result[1];
	$nics_configured{$nic}->{primary} = '1';
	$nics_info->{$nic} = undef;
	delete $nics_info->{$nic};
	last if (!scalar keys %$nics_info);
	last if (msg_box_yes_no_ask($dialog_cmd, "Do you want to add additional NICs to NABAT?", 
				    $QUESTION, 0, 70, 7));
	while(1) {
		@tmp = ();
		for my $nic (keys %$nics_info) {
			push @tmp, "\"$nic\" \"MAC: $nics_info->{$nic}->{nic_mac}\" $OFF";
		}
		$rlist = join(' ', @tmp);
		$res = radiolist_box($dialog_cmd, 
				    "Network subsystem", 
				    "\nPlease select NIC to be used in NABAT", 
				    $rlist, 
				    $NEXT_BUTTON, $CANCEL_BUTTON);
		last if ($res eq 'exit');
		if (!$res) {
			msg_box($dialog_cmd, 
				"\nNo NIC is selected.\nPlease select a NIC.",
				$ERROR);
			next;
		}
		$nic = $res;
		@result = input_form($dialog_cmd,
					"Interface settings for $nic",
					"\nStatic address configuration:",
					\@form_data,
					$NEXT_BUTTON, $CANCEL_BUTTON);
		last if(!$result[0]);
		if(!check_ip_format($result[0]) || !check_ip_format($result[1])) {
			msg_box($dialog_cmd, 
				"\nIncorrect format of IP or NETMASK.",
				$ERROR);
			next;
		}
		$nics_configured{$nic} = $nics_info->{$nic};
		$nics_configured{$nic}->{ipaddr} = $result[0];
		$nics_configured{$nic}->{netmask} = $result[1];
		$nics_configured{$nic}->{primary} = '0';
		$nics_info->{$nic} = undef;
		delete $nics_info->{$nic};
		last if (!scalar keys %$nics_info);
		last if (msg_box_yes_no_ask($dialog_cmd, "Do you want to add additional NICs to NABAT?", 
					    $QUESTION, 0, 70 ,7));
	}
	last;
}

gateway_err:
my @form_data = ();
push @form_data, "\"Gateway:\" 3 2 \"\" 3 16 15 15";
my @result = input_form($dialog_cmd,
			"Network configuration",
			"\nStatic address configuration:",
			\@form_data,
			$NEXT_BUTTON, $EXIT_BUTTON);
exit 0 if(!$result[0]);
if(!check_ip_format($result[0])) {
	msg_box($dialog_cmd, 
		"\nIncorrect 'GATEWAY' IP format.",
		$ERROR);
	goto gateway_err;
}
my $gateway = $result[0];

dns_err:
@form_data = ();
push @form_data, "\"DNS IP 1:\" 2 2 \"\" 2 16 15 15";
push @form_data, "\"DNS IP 2:\" 4 2 \"\" 4 16 15 15";
@result = input_form($dialog_cmd,
			"Network configuration",
			"\nStatic address configuration:",
			\@form_data,
			$NEXT_BUTTON, $EXIT_BUTTON);
exit 0 if(!$result[0]);
if(!check_ip_format($result[0])) {
	msg_box($dialog_cmd, 
		"\nIncorrect IP format of 'DNS 1'.",
		$ERROR);
	goto dns_err;
}
my $dns_ip_1 = $result[0];
my $dns_ip_2 = "Not Selected";
if($result[1]) {
	if(!check_ip_format($result[1])) {
		msg_box($dialog_cmd, 
			"\nIncorrect IP format of 'DNS 2'.",
			$ERROR);
		goto dns_err;
	}
	$dns_ip_2 = $result[1];
	$dns_ip_2 = "'$dns_ip_2'";
}

# Preparation of the information collected to show the user
#

my $spool_luns = join(' ', keys %syspool_luns);
my $spool_spares = "Not Selected";
$spool_spares = join(' ', keys %syspool_spare) if(scalar keys %syspool_spare);
my $d_volume = join(' ', keys %data_volume);
my $t_volume = join(' ', keys %test_volume);
my $nic_primary;
my $nic_primary_name;
my $nic_secondary = "Not Selected";
for my $nic (keys %nics_configured) {
	if ($nics_configured{$nic}->{primary} == 1) {
		$nic_primary = "\n     $nic: IP=".$nics_configured{$nic}->{ipaddr}.
			        ", NETMASK=".$nics_configured{$nic}->{netmask};
		$nic_primary_name = $nic;
	} else {
		if (!$nic_secondary || $nic_secondary eq "Not Selected") {
			$nic_secondary = "\n     $nic: IP=".$nics_configured{$nic}->{ipaddr}.
					  ", NETMASK=".$nics_configured{$nic}->{netmask};
		} else {
			$nic_secondary = $nic_secondary."\n     $nic: IP=".$nics_configured{$nic}->{ipaddr}.
					  ", NETMASK=".$nics_configured{$nic}->{netmask};
		}
	}
}

my $message = "
  Disk subsystem:
   syspool disk........: $spool_luns
   syspool spare disk..: $spool_spares
   volume 'data' disk..: $d_volume
   volume 'test' disk..: $t_volume
  Network subsystem:
   primary NIC.........: $nic_primary
   secondary NIC.......: $nic_secondary
   gateway.............: $gateway
   dns primary.........: $dns_ip_1
   dns secondary.......: $dns_ip_2

Do you want to reconfigure?";
goto start if(!msg_box_yes_no_ask($dialog_cmd, $message, "Summary Information", 1, 70, 22));

# Preparation of the information collected for output to a file, which will use NABAT.
#

my $machinesig = `/usr/nexenta/machinesig`;
chomp($machinesig);

my @tmp = ();
for my $lun (keys %syspool_luns) {
	push @tmp, $syspool_luns{$lun}->{disk_guid};
}
$spool_luns = join(' ', @tmp);

if(scalar keys %syspool_spare) {
	@tmp = ();
	for my $lun (keys %syspool_spare) {
		push @tmp, $syspool_spare{$lun}->{disk_guid};
	}
	$spool_spares = join(' ', @tmp);
	$spool_spares = "'$spool_spares'";
} else {
	$spool_spares = "undef";
}

@tmp = ();
for my $lun (keys %data_volume) {
	push @tmp, $data_volume{$lun}->{disk_guid};
}
$d_volume = join(' ', @tmp);

@tmp = ();
for my $lun (keys %test_volume) {
	push @tmp, $test_volume{$lun}->{disk_guid};
}
$t_volume = join(' ', @tmp);

my @nics = ();
my $nics_secondary;
for my $nic (keys %nics_configured) {
	push @nics, $nic;
	next if($nics_configured{$nic}->{primary} eq '1');
	if (!$nics_secondary) {
		$nics_secondary = 	"\t'".$nic."_ip'\t\t=> '".$nics_configured{$nic}->{ipaddr}."',\n".
					"\t'".$nic."_netmask'\t=> '".$nics_configured{$nic}->{netmask}."',\n".
					"\t'".$nic."_mac'\t\t=> '".$nics_configured{$nic}->{nic_mac}."',\n";
	} else {
		$nics_secondary = 	$nics_secondary.
					"\t'".$nic."_ip'\t\t=> '".$nics_configured{$nic}->{ipaddr}."',\n".
	                                "\t'".$nic."_netmask'\t=> '".$nics_configured{$nic}->{netmask}."',\n".
                                        "\t'".$nic."_mac'\t\t=> '".$nics_configured{$nic}->{nic_mac}."',\n";
	}
}

my $nic_list = join(' ', @nics);
my $nic_primary_ip = $nics_configured{$nic_primary_name}->{ipaddr};
my $nic_primary_netmask = $nics_configured{$nic_primary_name}->{netmask};
my $nic_primary_mac = $nics_configured{$nic_primary_name}->{nic_mac};
if($dns_ip_2 eq "Not Selected") {
	$dns_ip_2 = 'undef';
} else {
	$dns_ip_2 = "'$dns_ip_2'"; 
}

open(FILE, ">$MACHINE_CONFIG_FILE");
print FILE <<EOF;
package MUT_AUTO_CFG;
%MUT_AUTO_CFG::AUTO = (
	'enabled'       	=> 1,
	'nlm_keys'		=> {
		'com-3.x'	=> undef,
		'com-2.x'	=> undef,
		'eval-3.x'	=> undef,
		'eval-2.x'	=> undef,
	},
	'machinetype'		=> 'UNIX',
	'description'		=> undef,
	'vmhost'		=> undef,
	'ssh_passwd'		=> 'nexenta',
	'syspool_luns'		=> '$spool_luns',
	'syspool_spare'		=> $spool_spares,
	'vol1'			=> 'data',
	'vol1_luns'		=> '$d_volume',
	'test_luns'		=> '$t_volume',
	'machinesig'		=> '$machinesig',
	'gateway'		=> '$gateway',
	'dns_ip_1'		=> '$dns_ip_1',
	'dns_ip_2'		=> $dns_ip_2,
	'hostname'		=> '$nic_primary_ip',
	'nic_list'		=> '$nic_list',
	'nic_primary'		=> '$nic_primary_name',
	'${nic_primary_name}_ip'	\t=> '$nic_primary_ip',
	'${nic_primary_name}_netmask'	=> '$nic_primary_netmask',
	'${nic_primary_name}_mac'	\t=> '$nic_primary_mac',
$nics_secondary
);
EOF
close FILE;

# Preparation network for temporary ssh connect between this machine and NABAT.
#

info_box($dialog_cmd, "Preparing network for temporary ssh connection between this machine and NABAT...");

setup_network($nic_primary_name,
	      $nics_configured{$nic_primary_name}->{ipaddr},
	      $nics_configured{$nic_primary_name}->{netmask},
	      $gateway,
	      $dns_ip_1);

# Setup ROOT password for use for SSH connect
system("echo root:nexenta | chpasswd -m");

$message = "
\nPlease create new machine instance on NABAT and enter '$nics_configured{$nic_primary_name}->{ipaddr}' in 'IP ADDRESS' field.

IMPORTANT: 
Please do not poweroff this machine until NABAT done configuring it.
INFO:
Please contact technical support and request a license key for this machine.
Machine signature: '$machinesig'";
msg_box($dialog_cmd, $message, $INFORMATION);

exit 0;

#========================================================

=head2 
desc: Check ip, netmask ... for correct
args: 
	$ip - string with ip
return: 
	1 - record is correct
	0 - record is incorrect
=cut
sub check_ip_format {
	my ($ip) = @_;

	return 0 if ($ip !~ m/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/);
	for my $pos (split('\.', $ip)) {
		return 0 if (int($pos) > 255);
	}
	return 1;

}	

=head2 
desc: Information box
args: 
	$dialog_cmd	-
	$message	-
return:	none
=cut
sub info_box {
	my ($dialog_cmd, $message) = @_;

	system("$dialog_cmd --title \" Information \" --infobox \" \n $message\n\n \" 5 70");
}	

=head2 
desc: Message box without request
args: 
	$dialog_cmd	-
	$message	-
	$type		-
return: none
=cut
sub msg_box {
	my ($dialog_cmd, $message, $type) = @_;
	
	system("$dialog_cmd --title \" $type \" --msgbox \" \n $message\n\n \" 0 -1");
}



=head2 
desc: Message box with request "YES" and "NO".
args: 
	$dialog_cmd	-
	$message	-
	$title		-
	$default_no	-
	$size_x		-
	$size_y		-
return: 
	0		- pressed "YES"
	256		- presed "NO"
=cut
sub msg_box_yes_no_ask {
	my ($dialog_cmd, $message, $title, $default_no, $size_x, $size_y) = @_;

	if ($default_no == 1) {
		return system("$dialog_cmd --title \" $title \" --defaultno --yesno \"\n$message\n\n\" $size_y $size_x");
	} else {
		return system("$dialog_cmd --title \" $title \" --yesno \"\n$message\n\n\" $size_y $size_x");
	}
	
}

=head2 
desc: Radiolist box
args: 
	$dialog_cmd		-
	$title			-
	$radio_list_text	-
	$rlist			-
	$ok_label		-
	$cancel_label		-
return: 
	$result 		- string with input data or 'exit' if pressed button '$cancel_label'
=cut
sub radiolist_box {
	my ($dialog_cmd, $title, $radio_list_text, $rlist, $ok_label, $cancel_label) = @_;

	my $TMP_FILE = "/tmp/dialog_res.$$";

	system("$dialog_cmd --ok-label $ok_label --clear --cancel-label $cancel_label --title \" $title \" --radiolist \" $radio_list_text \" 0 0 0 $rlist 2>$TMP_FILE");
	my $rc = $?;
	my $result = `cat $TMP_FILE`;
	system("rm -f $TMP_FILE");
	chomp($result);

	return 'exit' if ($rc == 256);
	
	return $result;
}

=head2 
desc: Checklist box
args: 
return: 
=cut
sub checklist_box {
	my ($dialog_cmd, $title, $check_list_text, $rlist, $ok_label, $cancel_label) = @_;

	my $TMP_FILE = "/tmp/dialog_res.$$";

	system("$dialog_cmd --ok-label $ok_label --clear --cancel-label $cancel_label --title \" $title \" --checklist \" $check_list_text \" 0 0 0 $rlist 2>$TMP_FILE");
	my $rc = $?;
	my $tmp = `cat $TMP_FILE`;
	chomp($tmp);
	system("rm -f $TMP_FILE");
	my @result = split(' ', $tmp);
	@result = map {/^"(\S+)"$/} @result;
	
	return 0 if ($rc == 256);
	
	return @result;
}

=head2 
desc: Input box with buttons "$ok_label" and "$cancel_label"
args: 
	$dialog_cmd
	$title
	$form_text
	$form_data
	$ok_label
	$cancel_label
return: 
=cut
sub input_form {
	my ($dialog_cmd, $title, $form_text, $form_data, $ok_label, $cancel_label) = @_;

	my $TMP_FILE = "/tmp/dialog_res.$$";
	$form_data = join(' ', @$form_data);
	system("$dialog_cmd --ok-label $ok_label --clear --cancel-label $cancel_label --title \" $title \" --form \" $form_text \" 14 38 5 $form_data 2>$TMP_FILE");
	my $rc = $?;
	my @result = `cat $TMP_FILE`;
	@result = map {m/^(\S+)$/} @result;
	system("rm -f $TMP_FILE");
	return 0 if ($rc == 256);

	return @result;
}

=head2 
desc: Configuring network props for temporary SSH connect
args: 
	$iface
	$ipaddr
	$netmask
	$gateway
	$dns
return: none
=cut
sub setup_network {
	my ($iface, $ipaddr, $netmask, $gateway, $dns) = @_;
	
	system("echo \"$ipaddr netmask $netmask broadcast + up\" > /etc/hostname.$iface");
	system("echo \"$gateway\" > /etc/defaultrouter");
	system("echo \"$dns\" > /etc/resolve.conf");
	system("svcadm restart svc:/network/physical:default");
	sleep 2;
	system("svcadm enable svc:/network/ssh:default");
}	

=head2 
desc: Get information about NIC
args:	none
return: 
	%nics_info - hash, each element is a hash (nic_name) with keys: (nic_mac)
=cut
sub get_nics_info {

	my %nics_info = ();

	system("ifconfig -a plumb 2>/dev/null 1>&2");
	my @lines = `dladm show-link -p -o link 2>/dev/null`;
	for my $line (@lines) {
		chomp($line);
		if($line && $line ne 'lo0') {
			my @lines2 = `ifconfig $line`;
			my %info = ();
			for my $line2 (@lines2) {
				if ($line2 =~ m/ether\s+(\S+)/) {
					my @tmp = split(':', $1);
					my @tmp2 = ();
					for my $i (@tmp) {
						if (length($i) == 1) {
							$i = '0' . $i;	
						}
						push @tmp2, uc($i);
					}
					$info{nic_mac} = join(':', @tmp2);
					last;
				}
			}
			$nics_info{$line} = \%info;
		}
	}

	return \%nics_info;
}

=head2 
desc: Get information about available disks (exclude USB-Flash, FLOPPY, CDROM)
args: 	none
return: 
	%disks_info - hash, each element is a hash (disk_name) with keys: (disk_size, disk_vendor, disk_guid)
=cut
sub get_disks_info {

	system("rmformat >/dev/null 2>&1; devfsadm -c disk >/dev/null 2>&1; sync; sleep 3");
	my @disks = `/usr/bin/mdisco -ld`;
	@disks = map {m/\/(c\d+\S*d\d+)/} @disks;
	my %disks_info = ();
	for my $disk (@disks) {
		my @info = `/usr/bin/hddisco -d $disk`;
		my $found;
		my %info = ();
		for my $line (@info) {
			if ($line =~ m/^device_type\s+disk$/) {
				$found = 1;
				next;
			}
			if ($found) {
				if ($line =~ m/^size_str\s+(\S+)/) {
					$info{disk_size} = $1;
					next;
				}
				if ($line =~ m/^vendor\s+(\S+)/) {
					$info{disk_vendor} = $1;
					next;
				}
				if ($line =~ m/^product\s+(.+)$/) {
					$info{disk_vendor} = $info{disk_vendor} . " $1";
					next;
				}
				if ($line =~ m/^device_id\s+(\S+)\@(\S+)/) {
					$info{disk_guid} = $2;
					$disks_info{$disk} = \%info;
					last;
				}
			}
		}
		
	}
	return \%disks_info;
}	
